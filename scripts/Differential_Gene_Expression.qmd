---
title: "Differential Gene Expression - Baggerley's Test"
author: Payel Sardar
format: 
  pdf:
    pdf-engine: xelatex  # Use XeLaTeX for better support
    keep-tex: true       # Keep the intermediate .tex file for debugging
    include-in-header:
      text: |
        \usepackage{listings}
        \lstset{
          basicstyle=\ttfamily\small,  % Font style
          breaklines=true,             % Enable line wrapping
          breakatwhitespace=true,      % Break lines at whitespaces
          frame=single,                % Add a frame around code blocks
          prebreak=\raisebox{0ex}[0ex][0ex]{\ensuremath{\hookleftarrow}}, % Indicate broken lines
          postbreak=\raisebox{0ex}[0ex][0ex]{\ensuremath{\hookrightarrow}}
        }
---

This script performs Differential Gene Expression Analysis using Unpaired sample Baggerley's Test and creates corresponding visualisations.

# Reading and Pre-processing Datasets

Setting the home working directory.
```{r}
setwd("D:/KCL2024/Courses/7BBG1002_Cloud_computing/Project")
```

Loading necessary packages
```{r}
library(dplyr)
library(ggplot2)
library(tidyr)
library(data.table)
library(ggplot2)
```

Reading the file on sample information
```{r}
sample_info <- read.csv("../metadata/sample_types.csv", sep = ",", header = TRUE)
head(sample_info)
```

Reading the Normalized RPKM data for Glucose and Cellobiose samples
```{r}
glucose_data <- read.csv("../data/processed/Normalized_data/glucose_merged.csv", header = TRUE)
cellobiose_data <- read.csv("../data/processed/Normalized_data/cellobiose_merged.csv", header = TRUE)

head(glucose_data)
head(cellobiose_data)

```

Setting Geneid as row names and dropping the Geneid column to obtain a numeric dataset for downstream analysis
```{r}
gene_ids <- glucose_data$Geneid

row.names(glucose_data) <- glucose_data$Geneid
glucose_data <- glucose_data[, -1]

row.names(cellobiose_data) <- cellobiose_data$Geneid
cellobiose_data <- cellobiose_data[, -1]
```

# Differential Gene Expression Analysis

## Performing an unpaired sample analysis using the Baggerley's test 

Function for performing Baggerley's test
```{r}
baggerley_test <- function(prop1, prop2, pseudo_count = 0.001) {
  
  prop1 <- as.numeric(prop1)
  prop2 <- as.numeric(prop2)
  
  # Adding pseudo-count to avoid zero mean
  prop1 <- prop1 + pseudo_count
  prop2 <- prop2 + pseudo_count
  
  # Computing the sample size of each group
  n1 <- length(prop1)
  n2 <- length(prop2)
  
  # Computing the mean for each group
  mean1 <- mean(prop1)
  mean2 <- mean(prop2)
  
  # Compute the sample variance for each group
  var1 <- var(prop1)  # Variance for group 1
  var2 <- var(prop2)  # Variance for group 2
  
  # Calculate pooled variance
  #Adding 1e-6 prevent "Divide by zero" error in Z-score computation
  pooled_var <- (((n1 - 1) * var1) + ((n2 - 1) * var2)) / (n1 + n2 - 2) + 1e-6 
  
  # Z-score using pooled standard deviation
  z <- (mean1 - mean2) / sqrt(pooled_var * (1/n1 + 1/n2))
  
  # Two-tailed test
  p_value <- 2 * (1 - pnorm(abs(z)))
  
  return(p_value)
}

```

Iterating over rows(genes) to compute p-values for each gene using the Baggerley's test.
```{r}
baggerley_results <- sapply(1:nrow(glucose_data), function(i) {
  prop1 <- cellobiose_data[i, ] 
  prop2 <- glucose_data[i, ]   
  baggerley_test(prop1, prop2, 0.001)
})
```

Creating a dataframe to store the results from the Baggerley's test
```{r}
# Storing results (p-values) in a data frame
result_df2 <- data.frame(
  # Mean Normalised RPKM for glucose
  glucose_norm_rpkm_mean = rowMeans(glucose_data),
  # Mean Normalised RPKM for cellobiose samples
  cellobiose_norm_rpkm_mean = rowMeans(cellobiose_data),
  # P-values from Baggerley's test
  p_value = baggerley_results   
)
```

FDR correction for P-value
```{r}
result_df2$adjusted_p_value <- p.adjust(result_df2$p_value, method = "fdr")
```

Computing the fold change and log2 transformed fold change
```{r}
# Pseudo-count of 0.001 is added to prevent 0/0 error or log(0)
result_df2$fold_change <- (result_df2$cellobiose_norm_rpkm_mean + 0.001) /
  (result_df2$glucose_norm_rpkm_mean + 0.001)
result_df2$log2_fold_change <-  log2(abs(result_df2$fold_change))
```

Extracting the Differentially Expressed genes based on the significance threshold used in the original study
```{r}
significant_genes <- result_df2[result_df2$adjusted_p_value <= 0.001 & 
                                  abs(result_df2$log2_fold_change) >= 1.0, ]
head(significant_genes)
```

## Annotating the Differentially Genes

The GAF file used in the analysis was modified by removing the header (comment section) that begins with '!'.
```{r}
gaf_data <- as.data.frame(fread("../metadata/sgd.gaf/sgd_noheader.gaf", 
                                sep = "\t", quote = "", fill = TRUE))
gaf_data <- gaf_data[gaf_data[,1]=="SGD",]
gaf_data <- gaf_data[, c(3, 10,11)]
colnames(gaf_data) <- c("feature_id", "description", "synonym")
```

Cleaning up the gene synonyms and preparing to merge with DEG results
```{r}
gaf_data$gene_id <- sub("\\|.*", "", gaf_data$synonym)
gaf_data <- gaf_data %>% distinct()
```

Annotating the significant DEGs with the additional information from the GAF file
```{r}
significant_genes$gene_id <- rownames(significant_genes)
annotated_degs <- gaf_data %>%
  right_join(significant_genes, by = "gene_id")
annotated_degs$feature_id <- coalesce(annotated_degs$feature_id, annotated_degs$gene_id)
head(annotated_degs)
```

Exporting the results for downstream analysis
```{r}
write.csv(annotated_degs, "../Output/results/Annotated_degs_Baggerley.csv", 
          row.names = FALSE, fileEncoding = "UTF-8")
write(annotated_degs$feature_id, "../Output/results/FeatureId.txt", ncolumns = 1)
write(annotated_degs$gene_id, "../Output/results/GeneId.txt", ncolumns = 1)
```

### Extracting information about the transcription factors mentioned in the original study
```{r}
tf_list <- c('MET32', 'MET28', 'THI2', 'MIG2', 'UGA3', 'SIP4', 
             'MIG3', 'HMS2', 'KAR4', 'MAL13', 'YAP5', 'DAL80','ADR1', 
             'USV1', 'CAT8', 'GSM1', 'XBP1', 'SUT1', 'HAP4')
tf_dge <- annotated_degs %>% filter(feature_id %in% tf_list)

#write.csv(tf_dge, "../Output/results/TranscriptionFactors_degs.csv", 
#          row.names = FALSE, fileEncoding = "UTF-8")
```

## Data Visualisation

### Volcano plot for all differentially expressed genes
```{r}
# Creating a new column in the data frame to indicate significance
result_df2$Significance <- ifelse(result_df2$adjusted_p_value <= 0.001 & 
                                    abs(result_df2$log2_fold_change) >= 1.0, 
                                   "Significant", "Non-significant")

# Create the volcano plot with the updated 'Significance' column
volcano_plot <- ggplot(result_df2, aes(x = log2_fold_change,
                                       y = -log10(adjusted_p_value))) +
  geom_point(size = 0.7, aes(color = Significance)) + 
  geom_hline(yintercept = -log10(0.001), color = "red", linetype = "dashed") +
  geom_vline(xintercept = 0, color = "blue", linetype = "dashed") + 
  labs(x = "Log2 Fold Change", y = "-Log10(Adjusted P-Value)", 
       color = "Significance") +
  
  # Custom color scale for significance
  scale_color_manual(values = c("Non-significant" = "red", "Significant" = "blue")) +
  theme_minimal() +
  theme(
    legend.position = "top", 
    legend.title = element_text(size = 12),  
    legend.text = element_text(size = 10),    
    panel.grid.minor = element_blank()   
  )

print(volcano_plot)

```

Saving the plot as jpg for preparing reports
```{r}
ggsave(
  filename = "../Output/plots/VolcanoPlot_Baggerley.jpg",   
  plot = volcano_plot,                      
  width = 6, height = 4,               
  dpi = 300                            
)
```

### Visualising the top 10 upregulated and downregulated differentially expressed genes
```{r}
# sorting the annotated DEGs based on their log2(fold change) in ascending order
deg_sorted <- annotated_degs[order(-annotated_degs$log2_fold_change), ]
top_upregulated <- head(deg_sorted, 10)
top_downregulated <- tail(deg_sorted, 10)
top_genes <- rbind(top_upregulated, top_downregulated)

# Making a bar
top10 <- ggplot(top_genes, aes(x = reorder(feature_id, log2_fold_change), 
                      y = log2_fold_change, 
                      fill = log2_fold_change < 0)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = c("skyblue", "pink"),
                    labels = c("Top Upregulated", "Top Downregulated")) +
  labs(x = "Genes", 
       y = "Log2 Fold Change",
       fill = "Regulation Status") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(), # Remove major gridlines
    panel.grid.minor = element_blank(), # Remove minor gridlines
    legend.position = "top" # Move legend to the top
  ) +
  coord_flip()  # Flip for better readability
print(top10)

```

```{r}
ggsave(
  filename = "../Output/plots/Top_DEG_Baggerley.jpg",   
  plot = top10,                      
  width = 6, height = 4,               
  dpi = 300                            
)
```

### Preparing a bar plot to compare the fold change of differentially expressed transcription factors.
```{r}
tf_fc_plot <- ggplot(tf_dge, aes(x = reorder(feature_id, fold_change), 
                   y = log2_fold_change, 
                   fill = log2_fold_change > 0)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = c("pink", "skyblue"), 
                    labels = c("Downregulated", "Upregulated")) +
  labs(
    x = "Transcription Factors", 
    y = "Log2 transformed Fold Change (C8 vs G8)", 
    fill = "Expression Levels"
  ) +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(), # Remove major gridlines
    panel.grid.minor = element_blank(), # Remove minor gridlines
    legend.position = "top" # Move legend to the top
  ) +
  coord_flip()  # Flip for better readability
print(tf_fc_plot)
```

Saving the barplot
```{r}
ggsave(
  filename = "../Output/plots/Fold_change_tf_Baggerley.jpg",   
  plot = tf_fc_plot,                      
  width = 6, height = 4,               
  dpi = 300                            
)
```

# Comparing with the DeSeq results

Reading the DeSEQ results file
```{r}
deseq <- read.csv("../Output/results/sig_DEG_DeSEQ.csv", header=TRUE)
deseq_annotated <- gaf_data %>%
  right_join(deseq, by = "gene_id")
deseq_annotated$log2FoldChange <- (-1)*deseq_annotated$log2FoldChange
```

Making the Bar plot for the Top upregulated and Downregulated genes
```{r}
# sorting the annotated DEGs based on their log2(fold change) in ascending order
deseq_sorted <- deseq_annotated[order(-deseq_annotated$log2FoldChange), ]
top_upregulated <- head(deseq_sorted, 10)
top_downregulated <- tail(deseq_sorted, 10)
top_genes <- rbind(top_upregulated, top_downregulated)

# Making a bar
top10 <- ggplot(top_genes, aes(x = reorder(feature_id, log2FoldChange), 
                      y = log2FoldChange, 
                      fill = log2FoldChange < 0)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = c("skyblue", "pink"),
                    labels = c("Top Upregulated", "Top Downregulated")) +
  labs(x = "Genes", 
       y = "Log2 Fold Change",
       fill = "Regulation Status") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(), # Remove major gridlines
    panel.grid.minor = element_blank(), # Remove minor gridlines
    legend.position = "top" # Move legend to the top
  ) +
  coord_flip()  # Flip for better readability
print(top10)

```

```{r}
ggsave(
  filename = "../Output/plots/Top_DEG_DESeq.jpg",   
  plot = top10,                      
  width = 6, height = 4,               
  dpi = 300                            
)
```

Visualising the Expression profile of the differentially Transcription factors
```{r}
tf_deseq <- deseq_annotated %>% filter(feature_id %in% tf_list)

tf_fc_plot <- ggplot(tf_deseq, aes(x = reorder(feature_id, log2FoldChange), 
                   y = log2FoldChange, 
                   fill = log2FoldChange > 0)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = c("pink", "skyblue"), 
                    labels = c("Downregulated", "Upregulated")) +
  labs(
    x = "Transcription Factors", 
    y = "Log2 transformed Fold Change (C8 vs G8)", 
    fill = "Expression Levels"
  ) +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(), # Remove major gridlines
    panel.grid.minor = element_blank(), # Remove minor gridlines
    legend.position = "top" # Move legend to the top
  ) +
  coord_flip()  # Flip for better readability
print(tf_fc_plot)
```

```{r}
ggsave(
  filename = "../Output/plots/Fold_change_tf_DESeq.jpg",   
  plot = tf_fc_plot,                      
  width = 6, height = 4,               
  dpi = 300                            
)
```



